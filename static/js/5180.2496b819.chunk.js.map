{"version":3,"file":"static/js/5180.2496b819.chunk.js","mappings":"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","sources":["../node_modules/d3-shape/src/constant.js","../node_modules/d3-path/src/path.js","../node_modules/d3-shape/src/path.js","../node_modules/src/.internal/charts/percent/PercentDefaultTheme.ts","../node_modules/src/.internal/charts/percent/PercentChart.ts","../node_modules/src/.internal/charts/pie/PieChart.ts","../node_modules/src/.internal/charts/percent/PercentSeries.ts","../node_modules/d3-shape/src/math.js","../node_modules/d3-shape/src/arc.js","../node_modules/src/.internal/core/render/Slice.ts","../node_modules/src/.internal/core/render/RadialText.ts","../node_modules/src/.internal/core/render/RadialLabel.ts","../node_modules/src/.internal/charts/pie/PieSeries.ts"],"sourcesContent":["export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","const pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction append(strings) {\n  this._ += strings[0];\n  for (let i = 1, n = strings.length; i < n; ++i) {\n    this._ += arguments[i] + strings[i];\n  }\n}\n\nfunction appendRound(digits) {\n  let d = Math.floor(digits);\n  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);\n  if (d > 15) return append;\n  const k = 10 ** d;\n  return function(strings) {\n    this._ += strings[0];\n    for (let i = 1, n = strings.length; i < n; ++i) {\n      this._ += Math.round(arguments[i] * k) / k + strings[i];\n    }\n  };\n}\n\nexport class Path {\n  constructor(digits) {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n    this._append = digits == null ? append : appendRound(digits);\n  }\n  moveTo(x, y) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._append`Z`;\n    }\n  }\n  lineTo(x, y) {\n    this._append`L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  quadraticCurveTo(x1, y1, x, y) {\n    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\n    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arcTo(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._append`M${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._append`L${this._x1 = x1},${this._y1 = y1}`;\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      let x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;\n      }\n\n      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;\n    }\n  }\n  arc(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r, ccw = !!ccw;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(`negative radius: ${r}`);\n\n    let dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._append`M${x0},${y0}`;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._append`L${x0},${y0}`;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;\n    }\n  }\n  rect(x, y, w, h) {\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;\n  }\n  toString() {\n    return this._;\n  }\n}\n\nexport function path() {\n  return new Path;\n}\n\n// Allow instanceof d3.path\npath.prototype = Path.prototype;\n\nexport function pathRound(digits = 3) {\n  return new Path(+digits);\n}\n","import {Path} from \"d3-path\";\n\nexport function withPath(shape) {\n  let digits = 3;\n\n  shape.digits = function(_) {\n    if (!arguments.length) return digits;\n    if (_ == null) {\n      digits = null;\n    } else {\n      const d = Math.floor(_);\n      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);\n      digits = d;\n    }\n    return shape;\n  };\n\n  return () => new Path(digits);\n}\n","import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirtyKey(\"radius\");\n\t}\t\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\nimport type { PatternSet } from \"../../core/util/PatternSet\";\nimport type { Pattern } from \"../../core/render/patterns/Pattern\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n\t/**\n\t * Pattern used for the slice and related elements, e.g. legend marker.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n\t * @since 5.10.0\n\t */\n\tfillPattern: Pattern;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A [[PatternSet]] to use when asigning patterns for slices.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Pattern_sets} for more info\n\t * @since 5.10.0\n\t */\n\tpatterns?: PatternSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this.addDisposer(this._makeSlices());\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"fillPattern\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this.addDisposer(this._makeLabels());\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this.addDisposer(this._makeTicks());\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t\tconst patterns = this.get(\"patterns\");\n\t\tif (patterns) {\n\t\t\tpatterns.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\n\t\tif (dataItem.get(\"fillPattern\") == null) {\n\t\t\tlet patterns = this.get(\"patterns\");\n\t\t\tif (patterns) {\n\t\t\t\tdataItem.setRaw(\"fillPattern\", patterns.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif (slice.get(\"active\")) {\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (dataItem) {\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\t\tif (legendDataItem) {\n\t\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n","export const abs = Math.abs;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const sin = Math.sin;\nexport const sqrt = Math.sqrt;\n\nexport const epsilon = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const tau = 2 * pi;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n","import constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\nimport {withPath} from \"./path.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null,\n      path = withPath(arc);\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle. If this\n        // intersection fails, it’s probably because the arc is too small, so\n        // disable the corner radius entirely.\n        if (da < pi) {\n          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {\n            var ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = min(rc, (r0 - lc) / (kc - 1));\n            rc1 = min(rc, (r1 - lc) / (kc + 1));\n          } else {\n            rc0 = rc1 = 0;\n          }\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"shiftRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\t\t\t\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n","import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n","// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * **IMPORTANT!** If the label is used in a [[PieSeries]], its `alignLabels` setting\n\t * (default: `true`) takes precedence over `textType`. If you need to set this\n\t * to anything else than `regular`, make sure you also set `alignLabels: falese` on\n\t * `PieSeries`.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\tthis.setRaw(\"x\", undefined);\n\t\t\t\tthis.setRaw(\"y\", undefined);\t\t\t\t\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\n\t\t\t\t\t\tconst fillPattern = dataItem.get(\"fillPattern\");\n\t\t\t\t\t\tslice._setDefault(\"fillPattern\", fillPattern);\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\t\t\tlet points:Array<IPoint> = [];\n\n\t\t\tif(x != 0 || y != 0){\n\t\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t\t}\n\n\t\t\t\tlet dx = -pr;\n\t\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\t\tdx = pl;\n\t\t\t\t}\n\t\t\t\tpoints = [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }];\t\t\t\t\n\t\t\t}\n\n\t\t\ttick.set(\"points\", points);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["x","pi","Math","PI","tau","epsilon","tauEpsilon","append","strings","this","_","i","n","length","arguments","Path","constructor","digits","_x0","_y0","_x1","_y1","_append","d","floor","Error","concat","k","round","appendRound","moveTo","y","_templateObject","_taggedTemplateLiteral","closePath","_templateObject2","lineTo","_templateObject3","quadraticCurveTo","x1","y1","_templateObject4","bezierCurveTo","x2","y2","_templateObject5","arcTo","r","x0","y0","x21","y21","x01","y01","l01_2","_templateObject6","abs","x20","y20","l21_2","l20_2","l21","sqrt","l01","l","tan","acos","t01","t21","_templateObject8","_templateObject9","_templateObject7","arc","a0","a1","ccw","dx","cos","dy","sin","cw","da","_templateObject0","_templateObject1","_templateObject10","_templateObject11","rect","w","h","_templateObject12","toString","withPath","shape","RangeError","prototype","PercentDefaultTheme","Theme","setupDefaultRules","super","ic","_root","interfaceColors","rule","bind","setAll","legendLabelText","legendValueText","colors","ColorSet","new","width","p100","height","radius","percent","startAngle","endAngle","alignLabels","states","create","opacity","position","isMeasured","toggleKey","tooltipText","strokeWidth","strokeOpacity","role","lineJoin","shiftRadius","scale","textType","text","paddingTop","paddingBottom","populateText","location","paddingLeft","paddingRight","startLocation","endLocation","orientation","sequencedInterpolation","interactive","expandDistance","centerY","p50","centerX","rotation","fillOpacity","valueIs","setColor","PercentChart","SerialChart","_afterNew","_defaultThemes","push","chartContainer","children","seriesContainer","bulletsContainer","_processSeries","series","moveValue","Object","defineProperty","classNames","className","PieChart","_prepareChildren","innerWidth","innerHeight","get","innerRadius","bounds","$math","wr","right","left","hr","bottom","top","innerBounds","Percent","value","mr","min","max","setPrivateRaw","prevRadius","_maxRadius","$utils","isDirty","each","_markDirtyKey","index","indexOf","seriesRadius","seriesInnerRadius","_updateSize","markDirtyKey","PercentSeries","Series","Container","addDisposer","_makeSlices","_makeLabels","_makeTicks","makeSlice","dataItem","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","set","makeLabel","label","labelsContainer","labels","_shouldMakeBullet","makeTick","tick","ticksContainer","ticks","fields","_onDataClear","reset","patterns","_lLabels","_rLabels","_hLabels","_valuesDirty","sum","absSum","valueHigh","valueLow","Infinity","count","$array","_dataItems","valueWorking","percentTotal","setRaw","show","duration","promises","_super","call","_sequencedShowHide","Promise","all","hide","_updateChildren","markDirtyText","updateLegendValue","_arrange","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","dataItems","_updateTick","_afterChanged","processDataItem","next","showDataItem","$type","easing","animation","animate","key","to","waitForStop","applyAnimate","hideDataItem","hiddenState","hideTooltip","disposeDataItem","removeValue","dispose","hoverDataItem","isHidden","hover","unhoverDataItem","unhover","legendDataItem","markerRectangle","visualSettings","setting","_getNextDown","sort","a","b","adjustedLocalBounds","labelTop","_getNextUp","maxHeight","labelBottom","labelLeft","maxWidth","labelRight","markDirty","_dataItem","_dispose","chart","atan2","halfPi","asin","arcInnerRadius","arcOuterRadius","outerRadius","arcStartAngle","arcEndAngle","arcPadAngle","padAngle","cornerTangents","r1","rc","lo","ox","oy","x11","y11","x10","y10","x00","y00","d2","D","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","cornerRadius","constant","padRadius","context","path","buffer","r0","apply","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","rc0","rc1","p0","p1","oc","x3","y3","x32","y32","t","intersect","ax","ay","bx","by","kc","lc","centroid","Slice","Graphics","_getTooltipPoint","tooltipX","tooltipY","ix","iy","_beforeChanged","_clear","_changed","generator","_generator","_display","middleAngle","markDirtyPosition","RadialText","Text","_renderer","makeRadialText","textStyle","clear","markDirtyBounds","inside","kerning","RadialLabel","Label","_textKeys","_makeText","_text","baseRadius","radiusPrivate","getPrivate","innerRadiusPrivate","isPrivateDirty","labelAngle","angle","undefined","_flipped","_dirty","_updatePosition","localBounds","PieSeries","ListTemplate","Template","_new","themeTags","template","Tick","events","labelsTemplate","currentAngle","currentArc","color","_setDefault","fillPattern","setPrivate","labelRadius","isHiding","pl","pr","points","_positionBullet","bullet","sprite"],"sourceRoot":""}